<?php

namespace User\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    public function findUserByLocation($limit = 6, $latitude = null, $longitude = null, $distance = 20, $userTypes = null) {

        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.userTypes', 'ut')
                ->leftJoin('u.addresses', 'a')
                ->setMaxResults($limit)
        ;

        if ($userTypes && count($userTypes)) {
            foreach ($userTypes as $userType)
                $arrayUserType [] = $userType->getId();

            $query->andWhere($query->expr()->in('ut.id', $arrayUserType));
        }

        /* Geocode */
        $query->andWhere("(3958*3.1415926*sqrt((a.latitude - :latitude)*(a.latitude - :latitude)
                + cos(a.latitude/57.29578)*cos(:latitude/57.29578)*(a.longitude - :longitude)*(a.longitude-:longitude))/180)
                <= :distance")
                ->setParameter('latitude', $latitude)
                ->setParameter('longitude', $longitude)
                ->setParameter('distance', $distance);
        /* Geocode */

        $result = $query->getQuery()->getResult();
        shuffle($result);
        return $result;



        ;
    }

    public function countUserByLocation($latitude = null, $longitude = null, $distance = 20, $userTypes = null) {

        $query = $this->createQueryBuilder('u')
                ->select('COUNT(u.id)')
                ->leftJoin('u.userTypes', 'ut')
                ->leftJoin('u.addresses', 'a')
        ;

        if ($userTypes && count($userTypes)) {
            foreach ($userTypes as $userType)
                $arrayUserType [] = $userType->getId();

            $query->andWhere($query->expr()->in('ut.id', $arrayUserType));
        }

        /* Geocode */
        $query->andWhere("(3958*3.1415926*sqrt((a.latitude - :latitude)*(a.latitude - :latitude)
                + cos(a.latitude/57.29578)*cos(:latitude/57.29578)*(a.longitude - :longitude)*(a.longitude-:longitude))/180)
                <= :distance")
                ->setParameter('latitude', $latitude)
                ->setParameter('longitude', $longitude)
                ->setParameter('distance', $distance);
        /* Geocode */

        return $query->getQuery()->getSingleScalarResult();
    }

    public function countLovesMeByUser(User $User) {
        $query = $this->createQueryBuilder('u')
                ->select('COUNT(u.id)')
                ->leftJoin('u.lovesMe', 'lm')
                ->where('u.id = :id')
                ->setParameter('id', $User->getId());
        return $query->getQuery()->getSingleScalarResult();
    }

    public function getUsersLoveEvent(\Front\FrontBundle\Entity\Event $Event, $max = null) {
        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.eventloves', 'e')
                ->where('e.id = :id')
                ->setParameter('id', $Event->getId())
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand');

        if ($max > 0)
            $query->setMaxResults($max);
        return $query->getQuery()->getResult();
    }

    public function getUsersLoveUser(User $User, $max = null) {
        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.loves', 'l')
                ->where('l.id = :id')
                ->setParameter('id', $User->getId())
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand');

        if ($max > 0)
            $query->setMaxResults($max);
        return $query->getQuery()->getResult();
    }

    public function getUsersPresentsToEvent(\Front\FrontBundle\Entity\Event $Event, $max = null) {
        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.eventPresences', 'e')
                ->where('e.id = :id')
                ->setParameter('id', $Event->getId())
                ->addSelect('RAND() as HIDDEN rand')
                ->orderBy('rand');

        if ($max > 0)
            $query->setMaxResults($max);
        return $query->getQuery()->getResult();
    }

    public function findForFooter($limit = 6, $userTypes = null) {

        $arrayEventType = array();

        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.userTypes', 'ut')
                ->where('u.footer = 1')
                ->setMaxResults($limit);

        if ($userTypes && count($userTypes)) {
            foreach ($userTypes as $userType)
                $arrayEventType [] = $userType->getId();

            $query->andWhere($query->expr()->in('ut.id', $arrayEventType));
        }

        return $query->getQuery()->getResult();
    }

    public function findWithMusic($limit = 12) {
        $query = $this->createQueryBuilder('u')
                ->innerJoin('u.musics', 'm')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findWithVideo($limit = 12) {
        $query = $this->createQueryBuilder('u')
                ->innerJoin('u.videos', 'v')
                ->where('(v.move = 0 OR v.move IS NULL)')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findWithMove($limit = 12) {
        $query = $this->createQueryBuilder('u')
                ->innerJoin('u.videos', 'v')
                ->where('v.move = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForUserIndex() {
        $query = $this->createQueryBuilder('u');
        // order by count loves

        return $query->getQuery();
    }

    public function filter($data, $locale = 'en') {
        $query = $this->createQueryBuilder('u')
                ->leftJoin('u.userTypes', 'ut')
                ->leftJoin('ut.translations', 'utt', 'WITH', 'utt.locale = :locale')
                ->leftJoin('u.musicTypes', 'mt')
                ->leftJoin('mt.translations', 'mtt', 'WITH', 'mtt.locale = :locale')
                ->leftJoin('u.addresses', 'a')
                ->leftJoin('a.country', 'co')
                ->leftJoin('co.translations', 'cot', 'WITH', 'cot.locale = :locale')
                ->setParameter('locale', $locale)
                ->where("1 = 1");

        if (isset($data["search"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("u.username", ":search"));
            $orQuery->add($query->expr()->like("ut.name", ":search"));
            $orQuery->add($query->expr()->like("utt.title", ":search"));
            $orQuery->add($query->expr()->like("mt.name", ":search"));
            $orQuery->add($query->expr()->like("mtt.title", ":search"));
            $orQuery->add($query->expr()->like("a.city", ":search"));
            $orQuery->add($query->expr()->like("a.postcode", ":search"));
            $orQuery->add($query->expr()->like("cot.title", ":search"));
            $query->andWhere($orQuery);
            $query->setParameter('search', '%' . $data["search"] . '%');
        }

        if (isset($data["usertype"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("ut.name", ":usertype"));
            $orQuery->add($query->expr()->like("utt.title", ":usertype"));
            $query->andWhere($orQuery);
            $query->setParameter('usertype', '%' . $data["usertype"] . '%');
        }

        if (isset($data["musictype"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("mt.name", ":musictype"));
            $orQuery->add($query->expr()->like("mtt.title", ":musictype"));
            $query->andWhere($orQuery);
            $query->setParameter('musictype', '%' . $data["musictype"] . '%');
        }

        // order by count loves

        return $query->getQuery();
    }

    public function findByArrayFacebookIds($array = array()) {
        if (!count($array))
            return;

        $query = $this->createQueryBuilder('u')
                ->where('u.enabled = 1');
        $query->andWhere($query->expr()->in('u.facebook_id', $array))
                ->setMaxResults(200);

        return $query->getQuery()->getResult();
    }

}
