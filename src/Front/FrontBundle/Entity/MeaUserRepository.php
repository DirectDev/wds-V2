<?php

namespace Front\FrontBundle\Entity;

/**
 * MeaUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeaUserRepository extends \Doctrine\ORM\EntityRepository {

    public function findForHomePage($limit = 4) {
        $query = $this->createQueryBuilder('mu')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForSalsaDiscover($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.salsaDiscover = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForBachataDiscover($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.bachataDiscover = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForKizombaDiscover($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.kizombaDiscover = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForSalsaLearn($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.salsaLearn = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForBachataLearn($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.bachataLearn = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForKizombaLearn($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.kizombaLearn = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForSalsaMeet($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.salsaMeet = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForBachataMeet($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.bachataMeet = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForKizombaMeet($limit = 1) {
        $query = $this->createQueryBuilder('mu')
                ->where('mu.kizombaMeet = 1')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

    public function findForAdmin($locale = 'en') {
        $query = $this->createQueryBuilder('mu')
                ->leftJoin('mu.translations', 'mut', 'WITH', 'mut.locale = :locale')
                ->setParameter('locale', $locale);

        return $query->getQuery();
    }

    public function filterAdmin($data, $locale = 'en') {
        $query = $this->createQueryBuilder('mu')
                ->leftJoin('mu.translations', 'mut', 'WITH', 'mut.locale = :locale')
                ->leftJoin('mu.user', 'muu')
                ->setParameter('locale', $locale)
                ->where("1 = 1");

        if (isset($data["search"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("muu.username", ":search"));
            $orQuery->add($query->expr()->like("muu.email", ":search"));
            $orQuery->add($query->expr()->like("mut.description", ":search"));
            $query->andWhere($orQuery);
            $query->setParameter('search', '%' . $data["search"] . '%');
        }

        return $query->getQuery();
    }

}
