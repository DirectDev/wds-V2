<?php

namespace Front\FrontBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Front\FrontBundle\Entity\EventType;
use User\UserBundle\Entity\User;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends EntityRepository {

    public function findForCitypages($startdate_only = true, $limit = 6, $eventTypes = null, $musicTypes = null, $startdate = null, $stopdate = null, $latitude = null, $longitude = null, $distance = 20, $excludedEvents = array()) {

        if (!$startdate)
            $startdate = date('Y-m-d');
        if (!$stopdate)
            $stopdate = date('Y-m-d', strtotime('+7 days'));

        $arrayEventType = array();
        $arraymusicTypes = array();

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.eventTypes', 'et')
                ->leftJoin('e.musicTypes', 'mt')
                ->leftJoin('e.eventDates', 'ed')
                ->leftJoin('e.addresses', 'a')
                ->where('e.published = 1')
                ->setParameter('startdate', $startdate)
                ->setParameter('stopdate', $stopdate)
                ->orderBy('ed.startdate', 'ASC')
                ->groupBy('e.id, ed.startdate')
                ->setMaxResults($limit);

        if ($startdate_only)
            $query->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate = :startdate ))');
        else
            $query->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate >= :startdate AND ed.startdate <= :stopdate))');

        if ($eventTypes && count($eventTypes)) {
            foreach ($eventTypes as $eventType)
                $arrayEventType [] = $eventType->getId();

            $query->andWhere($query->expr()->in('et.id', $arrayEventType));
        }

        if ($musicTypes && count($musicTypes)) {
            foreach ($musicTypes as $musicType)
                $arraymusicTypes [] = $musicType->getId();

            $query->andWhere($query->expr()->in('mt.id', $arraymusicTypes));
        }

        if (count($excludedEvents)) {
            $toExclude = array();
            foreach ($excludedEvents as $event)
                $toExclude[] = $event->getId();
            $query->andWhere($query->expr()->notIn('e.id', $toExclude));
        }

        /* Geocode */
        $query->andWhere("(3958*3.1415926*sqrt((a.latitude - :latitude)*(a.latitude - :latitude)
                + cos(a.latitude/57.29578)*cos(:latitude/57.29578)*(a.longitude - :longitude)*(a.longitude-:longitude))/180)
                <= :distance")
                ->setParameter('latitude', $latitude)
                ->setParameter('longitude', $longitude)
                ->setParameter('distance', $distance);
        /* Geocode */


        return $query->getQuery()->getResult();
    }

    public function countForCitypages($startdate = null, $latitude = null, $longitude = null, $distance = 20) {

        if (!$startdate)
            $startdate = date('Y-m-d');

        $query = $this->createQueryBuilder('e')
                ->select('COUNT(e.id)')
                ->leftJoin('e.eventDates', 'ed')
                ->leftJoin('e.addresses', 'a')
                ->setParameter('startdate', $startdate)
                ->orderBy('ed.startdate', 'ASC')
                ->where('e.published = 1')
                ->andWhere('ed.startdate >= :startdate');


        /* Geocode */
        $query->andWhere("(3958*3.1415926*sqrt((a.latitude - :latitude)*(a.latitude - :latitude)
                + cos(a.latitude/57.29578)*cos(:latitude/57.29578)*(a.longitude - :longitude)*(a.longitude-:longitude))/180)
                <= :distance")
                ->setParameter('latitude', $latitude)
                ->setParameter('longitude', $longitude)
                ->setParameter('distance', $distance);
        /* Geocode */

        return $query->getQuery()->getSingleScalarResult();
    }

    public function countByUser(\User\UserBundle\Entity\User $User) {
        $query = $this->createQueryBuilder('e')
                ->select('COUNT(e.id)')
                ->leftJoin('e.user', 'u')
                ->where('u.id = :id')
                ->setParameter('id', $User->getId());
        return $query->getQuery()->getSingleScalarResult();
    }

    public function count() {
        $query = $this->createQueryBuilder('e')
                ->select('COUNT(e.id)');
        return $query->getQuery()->getSingleScalarResult();
    }

    public function getNextEventByUser(User $user, $limit = 6, $startdate = null, $stopdate = null, $published = true) {

        if (!$startdate)
            $startdate = date('Y-m-d');
        if (!$stopdate)
            $stopdate = date('Y-m-d', strtotime('+365 days'));

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.user', 'u')
                ->leftJoin('e.eventDates', 'ed')
                ->setParameter('startdate', $startdate)
                ->setParameter('stopdate', $stopdate)
                ->setParameter('id', $user->getId())
                ->orderBy('ed.startdate', 'ASC')
                ->groupBy('e.id, ed.startdate')
                ->setMaxResults($limit)
                ->where('u.id = :id')
                ->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate >= :startdate AND ed.startdate <= :stopdate))');

        if ($published)
            $query->andWhere('e.published = 1');
        else
            $query->andWhere('(e.published = 0 OR e.published IS NULL)');

        return $query->getQuery()->getResult();
    }

    public function getPassedEventByUser(User $user, $limit = 6, $published = true) {

        $startdate = date('Y-m-d');

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.user', 'u')
                ->leftJoin('e.eventDates', 'ed')
                ->setParameter('startdate', $startdate)
                ->setParameter('id', $user->getId())
                ->orderBy('ed.startdate', 'DESC')
                ->groupBy('e.id, ed.startdate')
                ->setMaxResults($limit)
                ->where('u.id = :id')
                ->andWhere('ed.startdate <= :startdate');

        if ($published)
            $query->andWhere('e.published = 1');
        else
            $query->andWhere('(e.published = 0 OR e.published IS NULL)');

        return $query->getQuery()->getResult();
    }

    public function getNextEventByUserQuery(User $user, $startdate = null, $stopdate = null) {

        if (!$startdate)
            $startdate = date('Y-m-d');
        if (!$stopdate)
            $stopdate = date('Y-m-d', strtotime('+365 days'));

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.user', 'u')
                ->leftJoin('e.eventDates', 'ed')
                ->setParameter('startdate', $startdate)
                ->setParameter('stopdate', $stopdate)
                ->setParameter('id', $user->getId())
//                ->orderBy('ed.startdate', 'ASC')
                ->groupBy('e.id, ed.startdate')
                ->where('u.id = :id')
                ->andWhere('e.published = 1')
                ->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate >= :startdate AND ed.startdate <= :stopdate))');

        return $query->getQuery();
    }

    public function getPassedEventByUserQuery(User $user, $published = true) {

        $startdate = date('Y-m-d');

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.user', 'u')
                ->leftJoin('e.eventDates', 'ed')
                ->setParameter('startdate', $startdate)
                ->setParameter('id', $user->getId())
//                ->orderBy('ed.startdate', 'DESC')
                ->groupBy('e.id, ed.startdate')
                ->where('u.id = :id')
                ->andWhere('ed.startdate <= :startdate');

        if ($published)
            $query->andWhere('e.published = 1');
        else
            $query->andWhere('(e.published = 0 OR e.published IS NULL)');

        return $query->getQuery();
    }

    public function findForFooter($limit = 6, $eventTypes = null) {

        $arrayEventType = array();

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.eventTypes', 'et')
                ->where('e.published = 1')
                ->andWhere('e.footer = 1')
                ->setMaxResults($limit);

        if ($eventTypes && count($eventTypes)) {
            foreach ($eventTypes as $eventType)
                $arrayEventType [] = $eventType->getId();

            $query->andWhere($query->expr()->in('et.id', $arrayEventType));
        }

        return $query->getQuery()->getResult();
    }

    public function findByContinent($limit = 30, $eventTypes = null, $musicTypes = null, $startdate = null, $stopdate = null, $array_coordinates = array()) {

        if (!$startdate)
            $startdate = date('Y-m-d');
        if (!$stopdate)
            $stopdate = date('Y-m-d', strtotime('+365 days'));

        $arrayEventType = array();
        $arraymusicTypes = array();

        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.eventTypes', 'et')
                ->leftJoin('e.musicTypes', 'mt')
                ->leftJoin('e.eventDates', 'ed')
                ->leftJoin('e.addresses', 'a')
                ->where('e.published = 1')
                ->setParameter('startdate', $startdate)
                ->setParameter('stopdate', $stopdate)
                ->orderBy('ed.startdate', 'ASC')
                ->groupBy('e.id, ed.startdate')
                ->setMaxResults($limit);

        $query->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate >= :startdate AND ed.startdate <= :stopdate))');

        if ($eventTypes && count($eventTypes)) {
            foreach ($eventTypes as $eventType)
                $arrayEventType [] = $eventType->getId();

            $query->andWhere($query->expr()->in('et.id', $arrayEventType));
        }

        if ($musicTypes && count($musicTypes)) {
            foreach ($musicTypes as $musicType)
                $arraymusicTypes [] = $musicType->getId();

            $query->andWhere($query->expr()->in('mt.id', $arraymusicTypes));
        }


        if (count($array_coordinates)) {
            $i = 0;
            $array_sub_query_coordinate = array();
            foreach ($array_coordinates as $coordinates) {
                $array_sub_query_coordinate[] = "((3958*3.1415926*sqrt((a.latitude - :latitude" . $i . ")*(a.latitude - :latitude" . $i . ")
                + cos(a.latitude/57.29578)*cos(:latitude" . $i . "/57.29578)*(a.longitude - :longitude" . $i . ")*(a.longitude-:longitude" . $i . "))/180)
                <= :distance" . $i . ")";

                $query->setParameter('latitude' . $i, $coordinates['latitude'])
                        ->setParameter('longitude' . $i, $coordinates['longitude'])
                        ->setParameter('distance' . $i, $coordinates['distance']);

                $i++;
            }
            $sub_query_coordinate = implode(' OR ', $array_sub_query_coordinate);
            $query->andWhere($sub_query_coordinate);
        }

        return $query->getQuery()->getResult();
    }

    public function filter($data, $locale = 'en') {
        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.user', 'u')
                ->leftJoin('e.translations', 'et', 'WITH', 'et.locale = :locale')
                ->leftJoin('e.musicTypes', 'mt')
                ->leftJoin('mt.translations', 'mtt', 'WITH', 'mtt.locale = :locale')
                ->leftJoin('e.eventTypes', 'ety')
                ->leftJoin('ety.translations', 'etyt', 'WITH', 'etyt.locale = :locale')
                ->setParameter('locale', $locale)
                ->where("1 = 1");

        if (isset($data["search"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("e.name", ":search"));
            $orQuery->add($query->expr()->like("et.title", ":search"));
            $orQuery->add($query->expr()->like("mt.name", ":search"));
            $orQuery->add($query->expr()->like("mtt.title", ":search"));
            $orQuery->add($query->expr()->like("ety.name", ":search"));
            $orQuery->add($query->expr()->like("etyt.title", ":search"));
            $orQuery->add($query->expr()->like("u.username", ":search"));
            $query->andWhere($orQuery);
            $query->setParameter('search', '%' . $data["search"] . '%');
        }

        if (isset($data["user"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("u.username", ":user"));
            $orQuery->add($query->expr()->like("u.id", ":user"));
            $query->andWhere($orQuery);
            $query->setParameter('user', '%' . $data["user"] . '%');
        }

        if (isset($data["eventtype"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("ety.name", ":eventtype"));
            $orQuery->add($query->expr()->like("etyt.title", ":eventtype"));
            $query->andWhere($orQuery);
            $query->setParameter('eventtype', '%' . $data["eventtype"] . '%');
        }

        if (isset($data["musictype"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("mt.name", ":musictype"));
            $orQuery->add($query->expr()->like("mtt.title", ":musictype"));
            $query->andWhere($orQuery);
            $query->setParameter('musictype', '%' . $data["musictype"] . '%');
        }

        if (isset($data["published"]) && $data["published"] === false)
            $query->andWhere('(e.published = 0 OR e.published IS NULL)');
        else
            $query->andWhere('e.published = 1');

        return $query->getQuery();
    }

    public function findForAdmin($locale = 'en') {
        $query = $this->createQueryBuilder('e');

        return $query->getQuery();
    }

    public function filterAdmin($data, $locale = 'en') {
        $query = $this->createQueryBuilder('e')
                ->leftJoin('e.translations', 'et', 'WITH', 'et.locale = :locale')
                ->setParameter('locale', $locale)
                ->where("1 = 1");

        if (isset($data["search"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("e.name", ":search"));
            $orQuery->add($query->expr()->like("et.title", ":search"));
            $orQuery->add($query->expr()->like("et.description", ":search"));
            $query->andWhere($orQuery);
            $query->setParameter('search', '%' . $data["search"] . '%');
        }

        return $query->getQuery();
    }

    public function findForSitemaps($limit = 1000) {

        $startdate = date('Y-m-d');
        $stopdate = date('Y-m-d', strtotime('+365 days'));

        $query = $this->createQueryBuilder('e')
                ->innerJoin('e.eventDates', 'ed')
                ->innerJoin('e.addresses', 'a')
                ->setParameter('startdate', $startdate)
                ->setParameter('stopdate', $stopdate)
                ->groupBy('e.id, ed.startdate')
                ->where('e.published = 1')
                ->andWhere('((
                    (ed.startdate <= :startdate AND ed.stopdate >= :startdate) 
                    OR (ed.startdate < :stopdate AND ed.stopdate >= :stopdate)
                    OR (ed.startdate >= :startdate AND ed.stopdate <= :stopdate)
                    )
                    OR ( ed.stopdate IS NULL AND ed.startdate >= :startdate AND ed.startdate <= :stopdate))')
                ->setMaxResults($limit);

        return $query->getQuery()->getResult();
    }

}
