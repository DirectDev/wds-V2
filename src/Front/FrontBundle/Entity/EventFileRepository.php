<?php

namespace Front\FrontBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EventFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventFileRepository extends EntityRepository {

    public function findPhotosByLocation($limit = 6, $latitude = null, $longitude = null, $distance = 20) {

        $query = $this->createQueryBuilder('ef')
                ->leftJoin('ef.event', 'e')
                ->leftJoin('e.addresses', 'a')
                ->setMaxResults($limit)
        ;

        /* Geocode */
        $query->andWhere("(3958*3.1415926*sqrt((a.latitude - :latitude)*(a.latitude - :latitude)
                + cos(a.latitude/57.29578)*cos(:latitude/57.29578)*(a.longitude - :longitude)*(a.longitude-:longitude))/180)
                <= :distance")
                ->setParameter('latitude', $latitude)
                ->setParameter('longitude', $longitude)
                ->setParameter('distance', $distance);
        /* Geocode */

        $result = $query->getQuery()->getResult();
        shuffle($result);
        return $result;



        ;
    }

    public function findForAdmin($locale = 'en') {
        $query = $this->createQueryBuilder('ef');

        return $query->getQuery();
    }

    public function filterAdmin($data, $locale = 'en') {
        $query = $this->createQueryBuilder('ef')
                ->leftJoin('ef.event', 'efe')
                ->leftJoin('efe.translations', 'efet', 'WITH', 'efet.locale = :locale')
                ->setParameter('locale', $locale)
                ->where("1 = 1");

        if (isset($data["search"])) {
            $orQuery = $query->expr()->orx();
            $orQuery->add($query->expr()->like("ef.name", ":search"));
            $orQuery->add($query->expr()->like("efe.name", ":search"));
            $orQuery->add($query->expr()->like("efet.title", ":search"));
            $orQuery->add($query->expr()->like("efet.description", ":search"));
            $query->andWhere($orQuery);
            $query->setParameter('search', '%' . $data["search"] . '%');
        }

        return $query->getQuery();
    }
    
    public function count() {
        $query = $this->createQueryBuilder('ef')
                ->select('COUNT(ef.id)');
        return $query->getQuery()->getSingleScalarResult();
    }

}
